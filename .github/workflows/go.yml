name: Build
on:
  push:
    branches: ["main", "development"]
    tags: ['**']
  pull_request:
    branches: ["main", "development"]
env:
  ARCHIVE_NAME: win2xcur-batch-${{ github.head_ref || github.ref_name }}.tar.gz
  DIRECTORY_NAME: win2xcur-batch-${{ github.head_ref || github.ref_name }}
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Set up Cachix token
        id: cachix-token
        run: |
          if [ -f .secrets/CACHIX_AUTH_TOKEN ]; then
            echo "Using Cachix token from .secrets directory"
            CACHIX_TOKEN=$(cat .secrets/CACHIX_AUTH_TOKEN)
          elif [ -n "${{ secrets.CACHIX_AUTH_TOKEN }}" ]; then
            echo "Using Cachix token from GitHub secrets"
            CACHIX_TOKEN="${{ secrets.CACHIX_AUTH_TOKEN }}"
          elif [ -n "$CACHIX_AUTH_TOKEN" ]; then
            echo "Using Cachix token from environment variable"
            CACHIX_TOKEN="$CACHIX_AUTH_TOKEN"
          else
            echo "No Cachix token found, skipping cache configuration"
            CACHIX_TOKEN=""
          fi
          echo "token=$CACHIX_TOKEN" >> $GITHUB_OUTPUT

      - name: Cache Nix store
        uses: cachix/cachix-action@v14
        if: steps.cachix-token.outputs.token != ''
        with:
          name: nix-cache
          authToken: ${{ steps.cachix-token.outputs.token }}
          skipPush: true

      - name: Build with Nix
        run: |
          nix-shell --run "go build -o win2xcur-batch converter.go"

      - name: Make executable
        run: chmod +x win2xcur-batch

      - name: Create directories
        run: |
          mkdir -p ${{ env.DIRECTORY_NAME }}/Sorted
          mkdir -p ${{ env.DIRECTORY_NAME }}/Unzipped

      - name: Archive and Compress
        run: |
          cp README.md ${{ env.DIRECTORY_NAME }}/
          cp LICENSE ${{ env.DIRECTORY_NAME }}/
          cp map.json ${{ env.DIRECTORY_NAME }}/
          cp win2xcur-batch ${{ env.DIRECTORY_NAME }}/
          cp shell.nix ${{ env.DIRECTORY_NAME }}/
          tar -czvf ${{ env.ARCHIVE_NAME }} ${{ env.DIRECTORY_NAME }}

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ${{ env.ARCHIVE_NAME }}

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ env.ARCHIVE_NAME }}
          generate_release_notes: true
          token: ${{ secrets.RELEASE_PIPELINE }}
